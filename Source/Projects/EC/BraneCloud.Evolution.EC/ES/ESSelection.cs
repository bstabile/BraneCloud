/*
 * BraneCloud.Evolution.EC (Evolutionary Computation)
 * Copyright 2011 Bennett R. Stabile (BraneCloud.Evolution.net|com)
 * Apache License, Version 2.0 (http://www.apache.org/licenses/LICENSE-2.0.html)
 *
 * This is an independent conversion from Java to .NET of ...
 *
 * Sean Luke's ECJ project at GMU 
 * (Academic Free License v3.0): 
 * http://www.cs.gmu.edu/~eclab/projects/ecj
 *
 * Radical alteration was required throughout (including structural).
 * The author of ECJ cannot and MUST not be expected to support this fork.
 *
 * If you wish to create yet another fork, please use a different root namespace.
 * BraneCloud is a registered domain that will be used for name/schema resolution.
 */

using System;
using System.Collections.Generic;
using BraneCloud.Evolution.EC.Configuration;

namespace BraneCloud.Evolution.EC.ES
{	
    /// <summary> 
    /// ESSelection is a special SelectionMethod designed to be used with 
    /// evolutionary strategies-type breeders.
    /// 
    /// <p/>To do evolution strategies evolution, the
    /// breeding pipelines should contain at least one ESSelection selection method.
    /// While a child is being generated by the pipeline, the ESSelection object will return a parent
    /// from the pool of mu parents.  The particular parent is chosen round-robin, so all the parents
    /// will have an equal number of children.  It's perfectly fine to have more than one ESSelection
    /// object in the tree, or to call the same one repeatedly during the course of generating a child;
    /// all such objects will consistently return the same parent.  They only increment to the nex
    /// parent in the pool of mu parents after the child has been created from the pipeline.  You can
    /// also mix ESSelection operators with other operators (like Tournament Selection).  But you ought
    /// to have <b>at least one</b> ESSelection operator in the pipeline -- else it wouldn't be Evolution
    /// Strategies, would it?
    /// <p/><b>Default Base</b><br/>
    /// es.select
    /// </summary>	
    [Serializable]
    [ECConfiguration("ec.es.ESSelection")]
    public class ESSelection : SelectionMethod
    {
        #region Constants

        public const string P_ESSELECT = "select";

        #endregion // Constants
        #region Properties

        public override IParameter DefaultBase
        {
            get { return ESDefaults.ParamBase.Push(P_ESSELECT); }
        }

        #endregion // Properties
        #region Operations

        /// <summary>
        /// MuCommaLambdaBreeder expects us to set the count to nonzero to indicate our existence
        /// </summary>
        public override void PrepareToProduce(IEvolutionState state, int subpop, int thread)
        {
            base.PrepareToProduce(state, subpop, thread);
            if (!(state.Breeder is MuCommaLambdaBreeder))
                state.Output.Fatal("ESSelection was handed a Breeder that's not either MuCommaLambdaBreeder or MuCommaPlusLambdaBreeder.");
            var breeder = (MuCommaLambdaBreeder)(state.Breeder);

            breeder.Count[thread] = 1;
        }

        public override int Produce(int subpop, IEvolutionState state, int thread)
        {
            if (!(state.Breeder is MuCommaLambdaBreeder))
                state.Output.Fatal("ESSelection was handed a Breeder that's not either MuCommaLambdaBreeder or MuCommaPlusLambdaBreeder.");
            var breeder = (MuCommaLambdaBreeder)(state.Breeder);

            // determine my position in the array
            var pos = (breeder.Lambda[subpop] % state.BreedThreads == 0 ? breeder.Lambda[subpop] / state.BreedThreads
                : breeder.Lambda[subpop] / state.BreedThreads + 1)
                * thread + breeder.Count[thread]; // note integer division

            // determine the parent
            var parent = pos / breeder.Mu[subpop]; // note integer division

            // increment our count
            //breeder.count[thread]++;

            return parent;
        }

        public override int ProduceWithoutCloning(
            int min, 
            int max, 
            int subpop, IList<Individual> inds, 
            IEvolutionState state, 
            int thread,
            IDictionary<string, object> misc)
        {
            if (min > 1) // uh oh
                state.Output.Fatal("ESSelection used, but it's being asked to produce more than one individual.");
            return base.ProduceWithoutCloning(min, max, subpop, inds, state, thread, misc);

            //if (!(state.Breeder is MuCommaLambdaBreeder))
            //    state.Output.Fatal("ESSelection was handed a Breeder that's not either MuCommaLambdaBreeder or MuCommaPlusLambdaBreeder.");
            //var breeder = (MuCommaLambdaBreeder)(state.Breeder);

            //// determine my position in the array
            //var pos = (breeder.Lambda[subpop] % state.BreedThreads == 0
            //    ? breeder.Lambda[subpop] / state.BreedThreads
            //    : breeder.Lambda[subpop] / state.BreedThreads + 1)
            //    * thread + breeder.Count[thread]; // note integer division

            //// determine the parent
            //var parent = pos / (breeder.Lambda[subpop] / breeder.Mu[subpop]); // note outer integer division

            //// increment our count
            ////breeder.count[thread]++;

            //// and so we return the parent
            //inds[start] = state.Population.Subpops[subpop].Individuals[parent];

            //// and so we return the parent
            //return 1;
        }

        #endregion // Operations
    }
}